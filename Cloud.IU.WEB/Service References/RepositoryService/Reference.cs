//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cloud.IU.WEB.RepositoryService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RepositoryService.IRepository")]
    public interface IRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserToken", ReplyAction="http://tempuri.org/IRepository/getUserTokenResponse")]
        string getUserToken(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserToken", ReplyAction="http://tempuri.org/IRepository/getUserTokenResponse")]
        System.Threading.Tasks.Task<string> getUserTokenAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/setUserCredentialToken", ReplyAction="http://tempuri.org/IRepository/setUserCredentialTokenResponse")]
        void setUserCredentialToken(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/setUserCredentialToken", ReplyAction="http://tempuri.org/IRepository/setUserCredentialTokenResponse")]
        System.Threading.Tasks.Task setUserCredentialTokenAsync(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/insertUserAndSession", ReplyAction="http://tempuri.org/IRepository/insertUserAndSessionResponse")]
        void insertUserAndSession(string userID, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/insertUserAndSession", ReplyAction="http://tempuri.org/IRepository/insertUserAndSessionResponse")]
        System.Threading.Tasks.Task insertUserAndSessionAsync(string userID, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUser", ReplyAction="http://tempuri.org/IRepository/getUserResponse")]
        Cloud.Core.Models.RepositoryService.RUserProSecurity getUser(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUser", ReplyAction="http://tempuri.org/IRepository/getUserResponse")]
        System.Threading.Tasks.Task<Cloud.Core.Models.RepositoryService.RUserProSecurity> getUserAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserBasedOnSessionID", ReplyAction="http://tempuri.org/IRepository/getUserBasedOnSessionIDResponse")]
        string getUserBasedOnSessionID(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserBasedOnSessionID", ReplyAction="http://tempuri.org/IRepository/getUserBasedOnSessionIDResponse")]
        System.Threading.Tasks.Task<string> getUserBasedOnSessionIDAsync(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/updateConnectionID", ReplyAction="http://tempuri.org/IRepository/updateConnectionIDResponse")]
        void updateConnectionID(string userID, string connectionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/updateConnectionID", ReplyAction="http://tempuri.org/IRepository/updateConnectionIDResponse")]
        System.Threading.Tasks.Task updateConnectionIDAsync(string userID, string connectionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getOnlineUsers", ReplyAction="http://tempuri.org/IRepository/getOnlineUsersResponse")]
        Cloud.Core.Models.RepositoryService.RUserProSecurity[] getOnlineUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getOnlineUsers", ReplyAction="http://tempuri.org/IRepository/getOnlineUsersResponse")]
        System.Threading.Tasks.Task<Cloud.Core.Models.RepositoryService.RUserProSecurity[]> getOnlineUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/removeUser", ReplyAction="http://tempuri.org/IRepository/removeUserResponse")]
        void removeUser(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/removeUser", ReplyAction="http://tempuri.org/IRepository/removeUserResponse")]
        System.Threading.Tasks.Task removeUserAsync(string userID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRepositoryChannel : Cloud.IU.WEB.RepositoryService.IRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RepositoryClient : System.ServiceModel.ClientBase<Cloud.IU.WEB.RepositoryService.IRepository>, Cloud.IU.WEB.RepositoryService.IRepository {
        
        public RepositoryClient() {
        }
        
        public RepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getUserToken(string userID) {
            return base.Channel.getUserToken(userID);
        }
        
        public System.Threading.Tasks.Task<string> getUserTokenAsync(string userID) {
            return base.Channel.getUserTokenAsync(userID);
        }
        
        public void setUserCredentialToken(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role) {
            base.Channel.setUserCredentialToken(userID, userName, passWord, tentant, token, zStoreToken, zStoreTenant, storageURL, expiredTime, ConnectionID, role);
        }
        
        public System.Threading.Tasks.Task setUserCredentialTokenAsync(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role) {
            return base.Channel.setUserCredentialTokenAsync(userID, userName, passWord, tentant, token, zStoreToken, zStoreTenant, storageURL, expiredTime, ConnectionID, role);
        }
        
        public void insertUserAndSession(string userID, string sessionID) {
            base.Channel.insertUserAndSession(userID, sessionID);
        }
        
        public System.Threading.Tasks.Task insertUserAndSessionAsync(string userID, string sessionID) {
            return base.Channel.insertUserAndSessionAsync(userID, sessionID);
        }
        
        public Cloud.Core.Models.RepositoryService.RUserProSecurity getUser(string userID) {
            return base.Channel.getUser(userID);
        }
        
        public System.Threading.Tasks.Task<Cloud.Core.Models.RepositoryService.RUserProSecurity> getUserAsync(string userID) {
            return base.Channel.getUserAsync(userID);
        }
        
        public string getUserBasedOnSessionID(string sessionID) {
            return base.Channel.getUserBasedOnSessionID(sessionID);
        }
        
        public System.Threading.Tasks.Task<string> getUserBasedOnSessionIDAsync(string sessionID) {
            return base.Channel.getUserBasedOnSessionIDAsync(sessionID);
        }
        
        public void updateConnectionID(string userID, string connectionID) {
            base.Channel.updateConnectionID(userID, connectionID);
        }
        
        public System.Threading.Tasks.Task updateConnectionIDAsync(string userID, string connectionID) {
            return base.Channel.updateConnectionIDAsync(userID, connectionID);
        }
        
        public Cloud.Core.Models.RepositoryService.RUserProSecurity[] getOnlineUsers() {
            return base.Channel.getOnlineUsers();
        }
        
        public System.Threading.Tasks.Task<Cloud.Core.Models.RepositoryService.RUserProSecurity[]> getOnlineUsersAsync() {
            return base.Channel.getOnlineUsersAsync();
        }
        
        public void removeUser(string userID) {
            base.Channel.removeUser(userID);
        }
        
        public System.Threading.Tasks.Task removeUserAsync(string userID) {
            return base.Channel.removeUserAsync(userID);
        }
    }
}
