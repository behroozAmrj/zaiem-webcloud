//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatService.RepositoryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RUserProSecurity", Namespace="http://schemas.datacontract.org/2004/07/RespositoryService")]
    [System.SerializableAttribute()]
    public partial class RUserProSecurity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StorageURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserTenantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string zStoreTenantField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string zStoreTokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionID {
            get {
                return this.ConnectionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionIDField, value) != true)) {
                    this.ConnectionIDField = value;
                    this.RaisePropertyChanged("ConnectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StorageURL {
            get {
                return this.StorageURLField;
            }
            set {
                if ((object.ReferenceEquals(this.StorageURLField, value) != true)) {
                    this.StorageURLField = value;
                    this.RaisePropertyChanged("StorageURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserTenant {
            get {
                return this.UserTenantField;
            }
            set {
                if ((object.ReferenceEquals(this.UserTenantField, value) != true)) {
                    this.UserTenantField = value;
                    this.RaisePropertyChanged("UserTenant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string zStoreTenant {
            get {
                return this.zStoreTenantField;
            }
            set {
                if ((object.ReferenceEquals(this.zStoreTenantField, value) != true)) {
                    this.zStoreTenantField = value;
                    this.RaisePropertyChanged("zStoreTenant");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string zStoreToken {
            get {
                return this.zStoreTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.zStoreTokenField, value) != true)) {
                    this.zStoreTokenField = value;
                    this.RaisePropertyChanged("zStoreToken");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RepositoryService.IRepository")]
    public interface IRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserToken", ReplyAction="http://tempuri.org/IRepository/getUserTokenResponse")]
        string getUserToken(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserToken", ReplyAction="http://tempuri.org/IRepository/getUserTokenResponse")]
        System.Threading.Tasks.Task<string> getUserTokenAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/setUserCredentialToken", ReplyAction="http://tempuri.org/IRepository/setUserCredentialTokenResponse")]
        void setUserCredentialToken(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/setUserCredentialToken", ReplyAction="http://tempuri.org/IRepository/setUserCredentialTokenResponse")]
        System.Threading.Tasks.Task setUserCredentialTokenAsync(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/insertUserAndSession", ReplyAction="http://tempuri.org/IRepository/insertUserAndSessionResponse")]
        void insertUserAndSession(string userID, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/insertUserAndSession", ReplyAction="http://tempuri.org/IRepository/insertUserAndSessionResponse")]
        System.Threading.Tasks.Task insertUserAndSessionAsync(string userID, string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUser", ReplyAction="http://tempuri.org/IRepository/getUserResponse")]
        ChatService.RepositoryService.RUserProSecurity getUser(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUser", ReplyAction="http://tempuri.org/IRepository/getUserResponse")]
        System.Threading.Tasks.Task<ChatService.RepositoryService.RUserProSecurity> getUserAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserBasedOnSessionID", ReplyAction="http://tempuri.org/IRepository/getUserBasedOnSessionIDResponse")]
        string getUserBasedOnSessionID(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getUserBasedOnSessionID", ReplyAction="http://tempuri.org/IRepository/getUserBasedOnSessionIDResponse")]
        System.Threading.Tasks.Task<string> getUserBasedOnSessionIDAsync(string sessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/updateConnectionID", ReplyAction="http://tempuri.org/IRepository/updateConnectionIDResponse")]
        void updateConnectionID(string userID, string connectionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/updateConnectionID", ReplyAction="http://tempuri.org/IRepository/updateConnectionIDResponse")]
        System.Threading.Tasks.Task updateConnectionIDAsync(string userID, string connectionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getOnlineUsers", ReplyAction="http://tempuri.org/IRepository/getOnlineUsersResponse")]
        ChatService.RepositoryService.RUserProSecurity[] getOnlineUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRepository/getOnlineUsers", ReplyAction="http://tempuri.org/IRepository/getOnlineUsersResponse")]
        System.Threading.Tasks.Task<ChatService.RepositoryService.RUserProSecurity[]> getOnlineUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRepositoryChannel : ChatService.RepositoryService.IRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RepositoryClient : System.ServiceModel.ClientBase<ChatService.RepositoryService.IRepository>, ChatService.RepositoryService.IRepository {
        
        public RepositoryClient() {
        }
        
        public RepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string getUserToken(string userID) {
            return base.Channel.getUserToken(userID);
        }
        
        public System.Threading.Tasks.Task<string> getUserTokenAsync(string userID) {
            return base.Channel.getUserTokenAsync(userID);
        }
        
        public void setUserCredentialToken(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role) {
            base.Channel.setUserCredentialToken(userID, userName, passWord, tentant, token, zStoreToken, zStoreTenant, storageURL, expiredTime, ConnectionID, role);
        }
        
        public System.Threading.Tasks.Task setUserCredentialTokenAsync(string userID, string userName, string passWord, string tentant, string token, string zStoreToken, string zStoreTenant, string storageURL, System.DateTime expiredTime, string ConnectionID, string role) {
            return base.Channel.setUserCredentialTokenAsync(userID, userName, passWord, tentant, token, zStoreToken, zStoreTenant, storageURL, expiredTime, ConnectionID, role);
        }
        
        public void insertUserAndSession(string userID, string sessionID) {
            base.Channel.insertUserAndSession(userID, sessionID);
        }
        
        public System.Threading.Tasks.Task insertUserAndSessionAsync(string userID, string sessionID) {
            return base.Channel.insertUserAndSessionAsync(userID, sessionID);
        }
        
        public ChatService.RepositoryService.RUserProSecurity getUser(string userID) {
            return base.Channel.getUser(userID);
        }
        
        public System.Threading.Tasks.Task<ChatService.RepositoryService.RUserProSecurity> getUserAsync(string userID) {
            return base.Channel.getUserAsync(userID);
        }
        
        public string getUserBasedOnSessionID(string sessionID) {
            return base.Channel.getUserBasedOnSessionID(sessionID);
        }
        
        public System.Threading.Tasks.Task<string> getUserBasedOnSessionIDAsync(string sessionID) {
            return base.Channel.getUserBasedOnSessionIDAsync(sessionID);
        }
        
        public void updateConnectionID(string userID, string connectionID) {
            base.Channel.updateConnectionID(userID, connectionID);
        }
        
        public System.Threading.Tasks.Task updateConnectionIDAsync(string userID, string connectionID) {
            return base.Channel.updateConnectionIDAsync(userID, connectionID);
        }
        
        public ChatService.RepositoryService.RUserProSecurity[] getOnlineUsers() {
            return base.Channel.getOnlineUsers();
        }
        
        public System.Threading.Tasks.Task<ChatService.RepositoryService.RUserProSecurity[]> getOnlineUsersAsync() {
            return base.Channel.getOnlineUsersAsync();
        }
    }
}
